// Code generated by "enumer -type=FaaType -transform=snake -json -text"; DO NOT EDIT.

package aslv1

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FaaTypeName = "controlled_airspaceuasfm_ceilingsuawashington_frznsufr_ptnsufr_ftstadiumairportsairspace_scheduletfr"

var _FaaTypeIndex = [...]uint8{0, 19, 32, 35, 49, 57, 65, 72, 80, 97, 100}

const _FaaTypeLowerName = "controlled_airspaceuasfm_ceilingsuawashington_frznsufr_ptnsufr_ftstadiumairportsairspace_scheduletfr"

func (i FaaType) String() string {
	if i >= FaaType(len(_FaaTypeIndex)-1) {
		return fmt.Sprintf("FaaType(%d)", i)
	}
	return _FaaTypeName[_FaaTypeIndex[i]:_FaaTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FaaTypeNoOp() {
	var x [1]struct{}
	_ = x[ControlledAirspace-(0)]
	_ = x[UasfmCeiling-(1)]
	_ = x[Sua-(2)]
	_ = x[WashingtonFrz-(3)]
	_ = x[NsufrPt-(4)]
	_ = x[NsufrFt-(5)]
	_ = x[Stadium-(6)]
	_ = x[Airports-(7)]
	_ = x[AirspaceSchedule-(8)]
	_ = x[Tfr-(9)]
}

var _FaaTypeValues = []FaaType{ControlledAirspace, UasfmCeiling, Sua, WashingtonFrz, NsufrPt, NsufrFt, Stadium, Airports, AirspaceSchedule, Tfr}

var _FaaTypeNameToValueMap = map[string]FaaType{
	_FaaTypeName[0:19]:        ControlledAirspace,
	_FaaTypeLowerName[0:19]:   ControlledAirspace,
	_FaaTypeName[19:32]:       UasfmCeiling,
	_FaaTypeLowerName[19:32]:  UasfmCeiling,
	_FaaTypeName[32:35]:       Sua,
	_FaaTypeLowerName[32:35]:  Sua,
	_FaaTypeName[35:49]:       WashingtonFrz,
	_FaaTypeLowerName[35:49]:  WashingtonFrz,
	_FaaTypeName[49:57]:       NsufrPt,
	_FaaTypeLowerName[49:57]:  NsufrPt,
	_FaaTypeName[57:65]:       NsufrFt,
	_FaaTypeLowerName[57:65]:  NsufrFt,
	_FaaTypeName[65:72]:       Stadium,
	_FaaTypeLowerName[65:72]:  Stadium,
	_FaaTypeName[72:80]:       Airports,
	_FaaTypeLowerName[72:80]:  Airports,
	_FaaTypeName[80:97]:       AirspaceSchedule,
	_FaaTypeLowerName[80:97]:  AirspaceSchedule,
	_FaaTypeName[97:100]:      Tfr,
	_FaaTypeLowerName[97:100]: Tfr,
}

var _FaaTypeNames = []string{
	_FaaTypeName[0:19],
	_FaaTypeName[19:32],
	_FaaTypeName[32:35],
	_FaaTypeName[35:49],
	_FaaTypeName[49:57],
	_FaaTypeName[57:65],
	_FaaTypeName[65:72],
	_FaaTypeName[72:80],
	_FaaTypeName[80:97],
	_FaaTypeName[97:100],
}

// FaaTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FaaTypeString(s string) (FaaType, error) {
	if val, ok := _FaaTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FaaTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FaaType values", s)
}

// FaaTypeValues returns all values of the enum
func FaaTypeValues() []FaaType {
	return _FaaTypeValues
}

// FaaTypeStrings returns a slice of all String values of the enum
func FaaTypeStrings() []string {
	strs := make([]string, len(_FaaTypeNames))
	copy(strs, _FaaTypeNames)
	return strs
}

// IsAFaaType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FaaType) IsAFaaType() bool {
	for _, v := range _FaaTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FaaType
func (i FaaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FaaType
func (i *FaaType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FaaType should be a string, got %s", data)
	}

	var err error
	*i, err = FaaTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for FaaType
func (i FaaType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for FaaType
func (i *FaaType) UnmarshalText(text []byte) error {
	var err error
	*i, err = FaaTypeString(string(text))
	return err
}
