// Code generated by "enumer -type AdvisoryCategoryType -json -text -transform lower"; DO NOT EDIT.

package asl

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AdvisoryCategoryTypeName = "emergencyrecreationaladmin"

var _AdvisoryCategoryTypeIndex = [...]uint8{0, 9, 21, 26}

const _AdvisoryCategoryTypeLowerName = "emergencyrecreationaladmin"

func (i AdvisoryCategoryType) String() string {
	i -= 1
	if i >= AdvisoryCategoryType(len(_AdvisoryCategoryTypeIndex)-1) {
		return fmt.Sprintf("AdvisoryCategoryType(%d)", i+1)
	}
	return _AdvisoryCategoryTypeName[_AdvisoryCategoryTypeIndex[i]:_AdvisoryCategoryTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AdvisoryCategoryTypeNoOp() {
	var x [1]struct{}
	_ = x[Emergency-(1)]
	_ = x[Recreational-(2)]
	_ = x[Admin-(3)]
}

var _AdvisoryCategoryTypeValues = []AdvisoryCategoryType{Emergency, Recreational, Admin}

var _AdvisoryCategoryTypeNameToValueMap = map[string]AdvisoryCategoryType{
	_AdvisoryCategoryTypeName[0:9]:        Emergency,
	_AdvisoryCategoryTypeLowerName[0:9]:   Emergency,
	_AdvisoryCategoryTypeName[9:21]:       Recreational,
	_AdvisoryCategoryTypeLowerName[9:21]:  Recreational,
	_AdvisoryCategoryTypeName[21:26]:      Admin,
	_AdvisoryCategoryTypeLowerName[21:26]: Admin,
}

var _AdvisoryCategoryTypeNames = []string{
	_AdvisoryCategoryTypeName[0:9],
	_AdvisoryCategoryTypeName[9:21],
	_AdvisoryCategoryTypeName[21:26],
}

// AdvisoryCategoryTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AdvisoryCategoryTypeString(s string) (AdvisoryCategoryType, error) {
	if val, ok := _AdvisoryCategoryTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AdvisoryCategoryTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AdvisoryCategoryType values", s)
}

// AdvisoryCategoryTypeValues returns all values of the enum
func AdvisoryCategoryTypeValues() []AdvisoryCategoryType {
	return _AdvisoryCategoryTypeValues
}

// AdvisoryCategoryTypeStrings returns a slice of all String values of the enum
func AdvisoryCategoryTypeStrings() []string {
	strs := make([]string, len(_AdvisoryCategoryTypeNames))
	copy(strs, _AdvisoryCategoryTypeNames)
	return strs
}

// IsAAdvisoryCategoryType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AdvisoryCategoryType) IsAAdvisoryCategoryType() bool {
	for _, v := range _AdvisoryCategoryTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AdvisoryCategoryType
func (i AdvisoryCategoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AdvisoryCategoryType
func (i *AdvisoryCategoryType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AdvisoryCategoryType should be a string, got %s", data)
	}

	var err error
	*i, err = AdvisoryCategoryTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AdvisoryCategoryType
func (i AdvisoryCategoryType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AdvisoryCategoryType
func (i *AdvisoryCategoryType) UnmarshalText(text []byte) error {
	var err error
	*i, err = AdvisoryCategoryTypeString(string(text))
	return err
}
